@gitignore-colour: #d9d9d9;
@git-new-color: #73c990;
@git-modify-color: #e2c08d;

@pastel-red: #ffb3ba;
@pastel-orange: #ffd2b3;
@pastel-yellow: #fff8b3;
@pastel-green: #c3ffb3;
@pastel-blue: #b3e9ff;
@pastel-violet: #dfb3ff;
@rainbow-colors: @pastel-red, @pastel-yellow, @pastel-green, @pastel-blue, @pastel-violet;

.list-tree li.list-nested-item > .list-item {
    color: @pastel-red;
}

// This is a recursively called mixin. It mimics a loop construct for Less.
// Within the loop, we do two things:
// 1) Extract the colour at that index from the colour list to use.
// 2) Add another class to our repeated class selector.
// Both these variables are output to create a new class and colour style.
.generate-rainbow(@list, @i: 0, @totalTimes: length(@list), @string, @repeated: @string) when (@i <= @totalTimes) {
    @extractMod: mod(@i, length(@list)) + 1;
    @rainbow: extract(@list, @extractMod);
    @selector: ~'@{repeated}';
    .list-tree @{selector} > .list-item {
        color: @rainbow;
    }
    .list-tree @{selector} .list-item.file {
        color: lighten(@rainbow, 5%);
    }
    .generate-rainbow(@list, (@i + 1), @totalTimes, @string, "@{string}@{repeated}");
}

.generate-rainbow(@rainbow-colors, 0, 12, "li.list-nested-item ", "li.list-nested-item li.list-nested-item ");

// .list-tree li.list-nested-item li.list-nested-item > .list-item {
//     color: @pastel-yellow;
// }
//
// .list-tree li.list-nested-item li.list-nested-item li.list-nested-item > .list-item {
//     color: @pastel-orange;
// }
//
// .list-tree li.list-nested-item li.list-nested-item li.list-nested-item li.list-nested-item > .list-item {
//     color: @pastel-green;
// }
//
// .list-tree li.list-nested-item li.list-nested-item li.list-nested-item li.list-nested-item li.list-nested-item > .list-item {
//     color: @pastel-blue;
// }
//
// .list-tree li.list-nested-item li.list-nested-item li.list-nested-item li.list-nested-item li.list-nested-item li.list-nested-item > .list-item {
//     color: @pastel-violet;
// }

// The following 3 selectors are copied directly from Atom's stylesheet

// Git-ignored files:
.list-group li.list-nested-item.selected.status-ignored > .list-item,
.list-group li.list-nested-item.status-ignored > .list-item,
.list-group li:not(.list-nested-item).selected.status-ignored,
.list-group li:not(.list-nested-item).status-ignored,
.list-tree li.list-nested-item.selected.status-ignored > .list-item,
.list-tree li.list-nested-item.status-ignored > .list-item,
.list-tree li:not(.list-nested-item).selected.status-ignored,
.list-tree li:not(.list-nested-item).status-ignored {
    color: @gitignore-colour !important;
}

// Git status: modified
.list-group li.list-nested-item.selected.status-modified > .list-item,
.list-group li:not(.list-nested-item).selected.status-modified,
.list-tree li.list-nested-item.selected.status-modified > .list-item,
.list-tree li:not(.list-nested-item).selected.status-modified {
    color: @git-modify-color !important;
}

// Git status: new
.list-group li.list-nested-item.selected.status-added > .list-item,
.list-group li:not(.list-nested-item).selected.status-added,
.list-tree li.list-nested-item.selected.status-added > .list-item,
.list-tree li:not(.list-nested-item).selected.status-added {
    color: @git-new-color !important;
}
